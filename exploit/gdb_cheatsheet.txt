gdb <program name> 
disassemble (disass) <function name>
info functions # run this at the start to show functions
info registers # (i r) # show registers

break <function name>
run "args" to execute the program

x/s <address> #examine something as a string
x/i <address> #examine as an instruction
x/d # decimal

If you want to view the stack in gdb:
x/24xw $esp #This will examine the value at esp and look at the next 24 hex words

#### to find the size of the stack
p/d ($ebp - $esp) / 4 # print in decimal the size of the stack

## to run python from the gdb command line
r $(python -c 'print "A"*24 +"B"')


Linux Memory addressing
0x08048000 <- start of every process vmem space
0xb7e5e000 <- libc address space start
0xb7fff000 <- start of the stack

http://syscalls.kernelgrok.com/
http://syscalls.kernelgrok.com/
This is handy if you want to write assembly, you can see what goes into each of the system calls.

